version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 20

  migrate:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      target: migrator
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
    restart: "no"

  app:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_CLIENTVAR: "clientvar"
    image: t3-app
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      # ----- URLs: set DIRECT values, no nested interpolation -----
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      AUTH_URL: ${AUTH_URL:-http://localhost:3000}

      # ----- Secrets / Providers -----
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_SECRET: ${AUTH_SECRET}
      AUTH_GOOGLE_ID: ${AUTH_GOOGLE_ID}
      AUTH_GOOGLE_SECRET: ${AUTH_GOOGLE_SECRET}
      AUTH_DISCORD_ID: ${AUTH_DISCORD_ID}
      AUTH_DISCORD_SECRET: ${AUTH_DISCORD_SECRET}

      # ----- DB / APIs -----
      DATABASE_URL: ${DATABASE_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}

      # ----- Networking (local) -----
      PORT: 3000
      HOSTNAME: 0.0.0.0

    ports:
      - "3000:3000"

    volumes:
      - uploads:/app/public/uploads/cvs
    restart: unless-stopped

volumes:
  pgdata:
  uploads:
